#!/usr/bin/env python
from Crypto.Util.number import *
from math import sqrt

# Given values for N (RSA modulus), e (public exponent), and c (ciphertext)
modulus_N = 535860808044009550029177135708168016201451343147313565371014459027743491739422885443084705720731409713775527993719682583669164873806842043288439828071789970694759080842162253955259590552283047728782812946845160334801782088068154453021936721710269050985805054692096738777321796153384024897615594493453068138341203673749514094546000253631902991617197847584519694152122765406982133526594928685232381934742152195861380221224370858128736975959176861651044370378539093990198336298572944512738570839396588590096813217791191895941380464803377602779240663133834952329316862399581950590588006371221334128215409197603236942597674756728212232134056562716399155080108881105952768189193728827484667349378091100068224404684701674782399200373192433062767622841264055426035349769018117299620554803902490432339600566432246795818167460916180647394169157647245603555692735630862148715428791242764799469896924753470539857080767170052783918273180304835318388177089674231640910337743789750979216202573226794240332797892868276309400253925932223895530714169648116569013581643192341931800785254715083294526325980247219218364118877864892068185905587410977152737936310734712276956663192182487672474651103240004173381041237906849437490609652395748868434296753449
public_exponent = 65537
ciphertext_c = 161367550346730604451454756189028938964941280347662098798775466019463375610700074840105776873791605070092554650190486030367121011578171525759600774739890458414593857709994072516290998135846956596662071379067305011746842247628316996977338024343628757374524136260758515864509435302781735938531030576289086798942

# Binary search for p (the prime factor of N)
low, high = 1, modulus_N
while low < high:
    mid = (low + high) // 2
    if mid * mid < modulus_N:
        low = mid + 1
    else:
        high = mid
factor_p = low

# Compute Euler's Totient function for N
phi_n = factor_p * (factor_p - 1)

# Calculate the private exponent d using the modular inverse of e modulo phi(n)
private_exponent = inverse(public_exponent, phi_n)

# Decrypt the ciphertext using RSA decryption formula
decrypted_message = pow(ciphertext_c, private_exponent, modulus_N)

# Convert the decrypted message from a long integer to bytes and print it
print(long_to_bytes(decrypted_message).decode())  # Expected flag format
